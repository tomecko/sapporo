{"version":3,"sources":["mockItems.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["getRandomElement","list","Math","floor","random","length","randomWords","names","getRandomJIRA","getRandomSlack","ceil","getRandomLink","getRandomItem","getRandomArray","maxLength","creatorFn","Array","from","keys","map","getRandomString","reduce","acc","mockItems","_","i","id","author","belongsToItems","Set","Number","category","description","lastUpdate","links","String","priority","tags","title","votes","Paragraph","Typography","Text","sortedItems","rawItems","sort","a","b","categoryColor","getChildIssues","memoize","items","parentId","filter","includes","App","useState","searchTerm","setSearchTerm","useDebounce","debouncedSearchTerm","filteredItems","useMemo","item","some","text","className","style","position","left","top","right","background","zIndex","borderBottom","allowClear","autoFocus","onChange","e","currentTarget","value","placeholder","prefix","SearchOutlined","marginTop","size","marginLeft","marginRight","p","Object","val","strong","bordered","dataSource","renderItem","Item","display","flexDirection","justifyContent","CaretUpOutlined","count","flexGrow","marginBottom","backgroundColor","type","color","tag","key","BulbOutlined","childItem","href","belongsToItem","LinkOutlined","link","BuildOutlined","EditOutlined","rowKey","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8497a428.chunk.js","sourcesContent":["import { Item } from './types';\n\nconst ITEMS_COUNT = 87;\n\nconst getRandomElement = <T>(list: T[]): T =>\n  list[Math.floor((Math.random() * list.length))];\n\nconst randomWords = [\n  'of the',\n  'solution',\n  'query builder',\n  'query',\n  'metrics',\n  'type',\n  'input',\n  'user',\n  'has',\n  'should',\n  'it',\n  'page',\n  'new',\n  'click',\n];\n\nconst names = ['John H. Junior', 'Bryan Roberts', 'Oleg Korelski', 'Jessica Smith'];\nconst getRandomPerson = (): string =>\n  names[Math.floor(Math.random() * names.length)];\n\nconst getRandomJIRA = () => `JIRA-${100000 + Math.floor(Math.random() * 10000)}`;\nconst getRandomSlack = () => `#channel-${Math.ceil(Math.random() * 100)} post`;\nconst getRandomLink = () => `some-link-${Math.ceil(Math.random() * 10)}`;\n\nconst getRandomItem = () => Math.ceil(Math.random() * ITEMS_COUNT);\n\nconst getRandomArray = (maxLength: number, creatorFn: () => number | string): (number | string)[] =>\n  Array.from(Array(Math.ceil(Math.random() * maxLength)).keys()).map(creatorFn);\n\nconst getRandomString = (length: number): string =>\n  Array.from(Array(length).keys()).reduce(\n    (acc) => `${acc} ${randomWords[Math.floor(Math.random() * randomWords.length)]}`,\n    '',\n  );\n\nconst getMockItem = (id: number): Item => ({\n  author: getRandomPerson(),\n  belongsToItems: Array.from(new Set(getRandomArray(2, getRandomItem))).map(Number),\n  category: getRandomElement(['bug', 'redesign', 'new feature']),\n  description: getRandomString(20),\n  id,\n  lastUpdate: '2020-03-14 14:55',\n  links: Array.from(new Set([\n    ...getRandomArray(2, getRandomJIRA),\n    ...getRandomArray(2, getRandomSlack),\n    ...getRandomArray(2, getRandomLink).map(String),\n  ])),\n  priority: Math.ceil(Math.random() * 4),\n  tags: Array.from(new Set([getRandomString(1), getRandomString(1)])),\n  title: getRandomString(5),\n  votes: Math.ceil(Math.random() * 9),\n});\n\nexport const mockItems: Item[] =\n  Array.from(Array(ITEMS_COUNT).keys()).map((_, i) => getMockItem(i + 1));\n","import { Badge, Button, Input, List, PageHeader, Tag, Typography } from 'antd';\nimport {\n  BuildOutlined,\n  BulbOutlined,\n  CaretUpOutlined,\n  EditOutlined,\n  LinkOutlined,\n  SearchOutlined,\n} from '@ant-design/icons';\nimport React, { useMemo, useState } from 'react';\nimport memoize from 'memoizee';\nimport { useDebounce } from 'use-debounce';\n\nimport { mockItems as rawItems } from './mockItems';\nimport { Item } from './types';\n\nimport './App.css';\n\nconst { Paragraph, Text } = Typography;\n\nconst sortedItems = rawItems.sort((a, b) => b.votes - a.votes);\n\nconst categoryColor: Record<string, string> = {\n  'bug': 'red',\n  'new feature': 'purple',\n  'redesign': 'geekblue',\n};\n\nconst getChildIssues = memoize((items: Item[], parentId: number): Item[] =>\n  items.filter(({ belongsToItems }) => belongsToItems.includes(parentId)));\n\nfunction App() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [debouncedSearchTerm] = useDebounce(searchTerm, 300);\n\n  const filteredItems = useMemo(\n    () => sortedItems.filter((item) =>\n      [item.title, item.description].some(text => text.includes(debouncedSearchTerm))),\n    [debouncedSearchTerm],\n  );\n\n  return (\n    <div className=\"App\">\n      <PageHeader\n        title=\"Sapporo Feedback & Ideas Tracker (PROTOTYPE)\"\n        style={{ position: 'fixed', left: 0, top: 0, right: 0, background: '#fafafa', zIndex: 1, borderBottom: '1px solid #777' }}\n      >\n        <Input\n          allowClear\n          autoFocus\n          onChange={e => {\n            setSearchTerm(e.currentTarget.value);\n          }}\n          placeholder={`search title, description, tags etc.`}\n          prefix={<SearchOutlined />}\n          value={searchTerm}\n        />\n        <div style={{ marginTop: '6px' }}>\n          Show only: {' '}\n          <Button size=\"small\" style={{ marginLeft: '10px', marginRight: '15px' }}>parent issues</Button>\n          {[4, 3, 2, 1].map(p => <Button size=\"small\">P{p}</Button>)}\n          <span style={{ marginLeft: '15px' }} />\n          {Object.keys(categoryColor).map(val =>\n            <Button size=\"small\">{val}</Button>)}{' '}\n          etc.\n        </div>\n        <div style={{ marginTop: '10px' }}>\n          <Text\n            strong\n          >\n            Showing {filteredItems.length} of {sortedItems.length}\n          </Text>\n        </div>\n      </PageHeader>\n      <div style={{ marginTop: '180px' }}>\n      </div>\n      <List\n        bordered\n        dataSource={filteredItems}\n        renderItem={item => (\n          <List.Item>\n            <div style={{ marginRight: '20px', display: 'flex', flexDirection: 'column', justifyContent: 'flex-start' }}>\n              <CaretUpOutlined title=\"I like it!\" />\n              <Badge\n                count={item.votes}\n                title={`${item.votes} people voted up: person A, person B, etc.`}\n              />\n            </div>\n            <div style={{ flexGrow: 1 }}>\n              <Paragraph style={{ marginBottom: 0 }}>\n                <strong>{item.title}</strong>{' '}\n                <Badge\n                  count={`P${item.priority}`}\n                  style={{ backgroundColor: `#${100 - (item.priority * 22)}c` }}\n                />{' '}\n                <Text type=\"secondary\">#{item.id}</Text>{' '}\n                <Tag\n                  color={categoryColor[item.category] ?? 'magenta'}\n                  style={{ marginLeft: '10px' }}\n                >\n                  {item.category}\n                </Tag>\n                <Text type=\"secondary\">\n                  {item.author}{' '}\n                  {item.lastUpdate}\n                </Text>\n                <br />\n                {item.description}\n                <br />\n                {item.tags.map(tag => <Tag key={tag}>{tag}</Tag>)}\n                <BulbOutlined />:{' '}\n                {getChildIssues(sortedItems, item.id).length > 0 ? 'child issues: ' : null}\n                {\n                  getChildIssues(sortedItems, item.id).map(childItem => (\n                    <a href={String(childItem.id)} key={childItem.id} style={{ marginRight: '8px' }}>\n                      #item-{childItem.id}\n                    </a>\n                  ))\n                }\n                {item.belongsToItems.length === 0 ? null : (\n                  <>\n                    parent issues:{' '}\n                    {item.belongsToItems.map(belongsToItem => (\n                      <a href={String(belongsToItem)} key={belongsToItem} style={{ marginRight: '8px' }}>\n                        #item-{belongsToItem}\n                      </a>\n                    ))}\n                  </>\n                )}\n                {' | '}\n                <LinkOutlined />:{' '}\n                {item.links.map(link =>\n                  <a href={String(link)} key={link} style={{ marginRight: '8px' }}>{link}</a>)}\n              </Paragraph>\n            </div>\n            <div>\n              <BuildOutlined title=\"group this item with…\" style={{ marginRight: '10px' }} />\n              <EditOutlined />\n            </div>\n          </List.Item>\n        )}\n        rowKey={item => String(item.id)}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}